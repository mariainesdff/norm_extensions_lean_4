/-
Copyright (c) 2023 Mar√≠a In√©s de Frutos-Fern√°ndez. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Mar√≠a In√©s de Frutos-Fern√°ndez
-/
import Mathlib.Topology.Instances.NNReal

#align_import from_mathlib.filter

/-!
# Limits of monotone and antitone sequences

We prove some auxiliary results about limits of `‚Ñù`-valued and `‚Ñù‚â•0`-valued sequences.

## Main Results

* `Real.tendsto_of_is_bounded_antitone` : an antitone, bounded below sequence `f : ‚Ñï ‚Üí ‚Ñù` has a
  finite limit.
* `NNReal.tendsto_of_is_bounded_antitone` : an antitone sequence `f : ‚Ñï ‚Üí ‚Ñù‚â•0` has a finite limit.

## Tags

glb, monotone, antitone, tendsto
-/


open scoped Filter Topology

/-- A nonempty, bounded below set of real numbers has a greatest lower bound. -/
theorem Real.exists_isGLB {S : Set ‚Ñù} (hne : S.Nonempty) (hbdd : BddBelow S) : ‚àÉ x, IsGLB S x := by
  set T := -S
  have hT_ne : T.Nonempty := Set.nonempty_neg.mpr hne
  have hT_bdd : BddAbove T := bddAbove_neg.mpr hbdd
  use -Classical.choose (Real.exists_isLUB T hT_ne hT_bdd)
  rw [‚Üê isLUB_neg]
  exact Classical.choose_spec (Real.exists_isLUB T hT_ne hT_bdd)

/-- An monotone, bounded above sequence `f : ‚Ñï ‚Üí ‚Ñù` has a finite limit. -/
theorem Filter.tendsto_of_is_bounded_monotone {f : ‚Ñï ‚Üí ‚Ñù} (h_bdd : BddAbove (Set.range f))
    (h_mon : Monotone f) : ‚àÉ r : ‚Ñù, Filter.Tendsto f Filter.atTop (ùìù r) := by
  obtain ‚ü®B, hB‚ü© := Real.exists_isLUB (Set.range f) (Set.range_nonempty f) h_bdd
  exact ‚ü®B, tendsto_atTop_isLUB h_mon hB‚ü©

/-- An antitone, bounded below sequence `f : ‚Ñï ‚Üí ‚Ñù` has a finite limit. -/
theorem Real.tendsto_of_is_bounded_antitone {f : ‚Ñï ‚Üí ‚Ñù} (h_bdd : BddBelow (Set.range f))
    (h_ant : Antitone f) : ‚àÉ r : ‚Ñù, Filter.Tendsto f Filter.atTop (ùìù r) := by
  obtain ‚ü®B, hB‚ü© := Real.exists_isGLB (Set.range_nonempty f) h_bdd
  exact ‚ü®B, tendsto_atTop_isGLB h_ant hB‚ü©

/-- An antitone sequence `f : ‚Ñï ‚Üí ‚Ñù‚â•0` has a finite limit. -/
theorem NNReal.tendsto_of_is_bounded_antitone {f : ‚Ñï ‚Üí NNReal} (h_ant : Antitone f) :
    ‚àÉ r : NNReal, Filter.Tendsto f Filter.atTop (ùìù r) := by
  have h_bdd_0 : (0 : ‚Ñù) ‚àà lowerBounds (Set.range fun n : ‚Ñï => (f n : ‚Ñù)) :=
    by
    intro r hr
    obtain ‚ü®n, hn‚ü© := Set.mem_range.mpr hr
    simp_rw [‚Üê hn]
    exact NNReal.coe_nonneg _
  have h_bdd : BddBelow (Set.range fun n => (f n : ‚Ñù)) := ‚ü®0, h_bdd_0‚ü©
  obtain ‚ü®L, hL‚ü© := Real.tendsto_of_is_bounded_antitone h_bdd h_ant
  have hL0 : 0 ‚â§ L :=
    haveI h_glb : IsGLB (Set.range fun n => (f n : ‚Ñù)) L := isGLB_of_tendsto_atTop h_ant hL
    (le_isGLB_iff h_glb).mpr h_bdd_0
  use‚ü®L, hL0‚ü©
  rw [‚Üê NNReal.tendsto_coe]
  exact hL
